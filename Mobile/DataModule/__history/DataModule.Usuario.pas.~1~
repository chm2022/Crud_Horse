unit DataModule.Usuario;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, RESTRequest4D, System.JSON,
  uConstantes, uSession;

type
  TDmUsuario = class(TDataModule)
    qryUsuario: TFDQuery;
    qryConsUsuario: TFDQuery;
    TabUsuario: TFDMemTable;
  private
    { Private declarations }
  public
    procedure EditarUsuario(nome, email: string);
    procedure ListarUsuarios;
    procedure InserirUsuario(cod_usuario: integer;
                                    nome, email, senha, token_jwt: string);
    procedure ExcluirUsuario;
    procedure EditarSenha(senha: string);
    procedure Logout;
    procedure DesativarOnboarding;
    procedure LoginWeb(email, senha: string);
    procedure NovaContaWeb(nome, email, senha: string);
    procedure EditarUsuarioWeb(nome, email: string);
    procedure EditarSenhaWeb(senha: string);
    function ObterDataServidor: string;
    procedure ExcluirContaWeb;
  end;

var
  DmUsuario: TDmUsuario;

implementation

{%CLASSGROUP 'FMX.Controls.TControl'}

uses DataModule.Global;

{$R *.dfm}

procedure TDmUsuario.ListarUsuarios;
begin
    qryConsUsuario.Active := false;
    qryConsUsuario.SQL.Clear;
    qryConsUsuario.SQL.Add('select * from tab_usuario');
    qryConsUsuario.active := true;
end;

procedure TDmUsuario.InserirUsuario(cod_usuario: integer;
                                    nome, email, senha, token_jwt: string);
begin
    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('insert into tab_usuario(cod_usuario, nome, email, senha, token_jwt, ind_login, ind_onboarding)');
    qryUsuario.SQL.Add('values(:cod_usuario, :nome, :email, :senha, :token_jwt, :ind_login, :ind_onboarding)');

    qryUsuario.ParamByName('cod_usuario').Value := cod_usuario;
    qryUsuario.ParamByName('nome').Value := nome;
    qryUsuario.ParamByName('email').Value := email;
    qryUsuario.ParamByName('senha').Value := senha;
    qryUsuario.ParamByName('token_jwt').Value := token_jwt;
    qryUsuario.ParamByName('ind_login').Value := 'S';
    qryUsuario.ParamByName('ind_onboarding').Value := 'N';

    qryUsuario.ExecSQL;
end;

procedure TDmUsuario.EditarUsuario(nome, email: string);
begin
    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('update tab_usuario set nome=:nome, email=:email');

    qryUsuario.ParamByName('nome').Value := nome;
    qryUsuario.ParamByName('email').Value := email;

    qryUsuario.ExecSQL;
end;

procedure TDmUsuario.ExcluirUsuario;
begin
    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_usuario');
    qryUsuario.ExecSQL;
end;

procedure TDmUsuario.EditarSenha(senha: string);
begin
    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('update tab_usuario set senha=:senha');

    qryUsuario.ParamByName('senha').Value := senha;

    qryUsuario.ExecSQL;
end;

procedure TDmUsuario.Logout;
begin
    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('update tab_usuario set ind_login=:ind_login, ind_onboarding=:ind_onboarding');
    qryUsuario.ParamByName('ind_login').Value := 'N';
    qryUsuario.ParamByName('ind_onboarding').Value := 'N';
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_pedido_item');
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_pedido');
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_notificacao');
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_produto');
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_cliente');
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_cond_pagto');
    qryUsuario.ExecSQL;

    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('delete from tab_config where campo <> ''VERSAO'' ');
    qryUsuario.ExecSQL;
end;

procedure TDmUsuario.DesativarOnboarding;
begin
    qryUsuario.Active := false;
    qryUsuario.SQL.Clear;
    qryUsuario.SQL.Add('update tab_usuario set ind_onboarding=:ind_onboarding');

    qryUsuario.ParamByName('ind_onboarding').Value := 'N';

    qryUsuario.ExecSQL;
end;

procedure TDmUsuario.LoginWeb(email, senha: string);
var
    resp: IResponse;
    json: TJsonObject;
begin
    TabUsuario.FieldDefs.Clear;

    try
        json := TJsonObject.Create;
        json.AddPair('email', email);
        json.AddPair('senha', senha);

        resp := TRequest.New.BaseURL(BASE_URL)
                .Resource('usuarios/login')
                .AddBody(json.ToJSON)
                .Accept('application/json')
                .DataSetAdapter(TabUsuario)
                .Post;

        if resp.StatusCode <> 200 then
            raise Exception.Create(resp.Content);

    finally
        json.DisposeOf;
    end;
end;

procedure TDmUsuario.NovaContaWeb(nome, email, senha: string);
var
    resp: IResponse;
    json: TJsonObject;
begin
    TabUsuario.FieldDefs.Clear;

    try
        json := TJsonObject.Create;
        json.AddPair('nome', nome);
        json.AddPair('email', email);
        json.AddPair('senha', senha);

        resp := TRequest.New.BaseURL(BASE_URL)
                .Resource('usuarios')
                .AddBody(json.ToJSON)
                .Accept('application/json')
                .DataSetAdapter(TabUsuario)
                .Post;

        if resp.StatusCode <> 201 then
            raise Exception.Create(resp.Content);

    finally
        json.DisposeOf;
    end;
end;

procedure TDmUsuario.EditarUsuarioWeb(nome, email: string);
var
    resp: IResponse;
    json: TJsonObject;
begin
    TabUsuario.FieldDefs.Clear;

    try
        json := TJsonObject.Create;
        json.AddPair('nome', nome);
        json.AddPair('email', email);

        resp := TRequest.New.BaseURL(BASE_URL)
                .Resource('usuarios')
                .TokenBearer(TSession.TOKEN_JWT)
                .AddBody(json.ToJSON)
                .Accept('application/json')
                .DataSetAdapter(TabUsuario)
                .Put;

        if resp.StatusCode <> 200 then
            raise Exception.Create(resp.Content);

    finally
        json.DisposeOf;
    end;
end;

procedure TDmUsuario.EditarSenhaWeb(senha: string);
var
    resp: IResponse;
    json: TJsonObject;
begin
    TabUsuario.FieldDefs.Clear;

    try
        json := TJsonObject.Create;
        json.AddPair('senha', senha);

        resp := TRequest.New.BaseURL(BASE_URL)
                .Resource('usuarios/senha')
                .TokenBearer(TSession.TOKEN_JWT)
                .AddBody(json.ToJSON)
                .Accept('application/json')
                .Put;

        if resp.StatusCode <> 200 then
            raise Exception.Create(resp.Content);

    finally
        json.DisposeOf;
    end;
end;

function TDmUsuario.ObterDataServidor(): string;
var
    resp: IResponse;
begin

    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('usuarios/horario')
            .TokenBearer(TSession.TOKEN_JWT)
            .Accept('application/json')
            .Get;

    if resp.StatusCode <> 200 then
        raise Exception.Create(resp.Content)
    else
        Result := resp.Content;  // 2022-11-11 17:20:11
end;

procedure TDmUsuario.ExcluirContaWeb;
var
    resp: IResponse;
begin
    resp := TRequest.New.BaseURL(BASE_URL)
            .Resource('usuarios')  // Horse
            .ResourceSuffix(TSession.COD_USUARIO.ToString) // Horse

            //.Resource('usuarios/perfil')   // RDW
            //.ResourceSuffix(TSession.COD_USUARIO.ToString + '/0')  // RDW

            .TokenBearer(TSession.TOKEN_JWT)
            .Accept('application/json')
            .Delete;

    if resp.StatusCode <> 200 then
        raise Exception.Create(resp.Content);

end;

end.
